% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proliferation_modeling_functions.r
\name{fit.peaks}
\alias{fit.peaks}
\title{Fit a proliferation model using least squares or maximum likelihood}
\usage{
fit.peaks(
  trace,
  peak.0.lower.bound,
  bins = 250,
  smoothing.window = 2,
  plot.optim = T,
  plot.final = T,
  plot = T,
  plot.main = "Proliferation model",
  opt.peak.pos.dev = NULL,
  window.scaling.factors = c(0.25, 0.25),
  opt.trim.left.tail = F,
  opt.trim.right.tail = F,
  mode = "LS",
  full.out = F,
  peak.x.model = F,
  peak.x.upper.bound = NULL,
  peak.x.position = NULL,
  peak.x.fixed = F,
  peak.x.thresh.summit = 0.05,
  peak.x.thresh.enrich = 1.2,
  verbose = F,
  log = T,
  ...
)
}
\arguments{
\item{trace}{raw FACS intensities}

\item{peak.0.lower.bound}{the value on log10 scale where the first valley is}

\item{bins}{number of bins for fitting (default 250)}

\item{smoothing.window}{number of values up and downstream for the NN
smoother (default 2)}

\item{plot.optim}{should optimization plots be plotted}

\item{plot.final}{should final plot of optimized fit be plotted}

\item{plot}{should results be plotted. Overrides plot.optim & plot.final}

\item{plot.main}{title for the plot}

\item{opt.peak.pos.dev}{limits the range in x where peak positions can be
optimized within. See @details}

\item{window.scaling.factors}{Scaling factors for peak finding See details (default c(0.25, 0.25))}

\item{opt.trim.left.tail}{Should values that fall outside the initial model
range be removed from optimization. See @details}

\item{opt.trim.right.tail}{Should values that fall outside the initial model
range be removed from optimization. See @details}

\item{mode}{either LS for least squares or 'MLE' for maximum likelihood
estimation based optimizer. See @details}

\item{full.out}{If true output a list with everything needed to easily
re-make plots. Useful if you want to regen plots in ggplot for instance.}

\item{peak.x.model}{Should an extra peak be fit that models a trace negative
population of cells. See @details}

\item{peak.x.upper.bound}{If peak.x.model=T, specify the hard limit for
finding the mode of peak x. Set to NULL for no limit. (default NULL)}

\item{peak.x.thresh.summit}{Controls the automated detection of the mode of
peak x. Only peaks with a % of the total data mode of this are considered.
Should be valued between 0-1. (default 0.05)}

\item{peak.x.thresh.enrich}{Similar to peak.thresh.enrich but for peak x.
(default = 1.1)}

\item{peak.max}{the maximum number of peaks to search for (default 12)}

\item{peak.thresh.enrich}{Fold change enrichment of a peak over its valleys}

\item{peak.thresh.summit}{Relative height of a peak with respect to trace mode}
}
\value{
A data frame with peak statistics or list of objects if full.out=T
}
\description{
Fit peaks on a CTV or CFSE or other tracking dye trace using a binned
or maximum likelihood approach. The trace should be raw per event data from
the FCS file on the CTV+ population.
}
\details{
This fits a proliferation model on a trace of raw FACS intensities.
The fitting happens in two stages:
1. Initial estimation of number of peaks and their positions
2. Optimization of the model to find final values

Initial estimation is done based on thresholds. First the 0 peak
is estimated by finding the mode of the data > peak.0.lower.bound.

The next peak is then found by finding the mode, at half of the intenstiy
of the mode of peak 0. The range where the mode is looked for can be
controlled by tweaking `window.scaling.factors`.

Peaks are only called if they exceed `peak.thresh.enrich`, the relative
enrichment between the valley's either side of the peak and the peak summit
and `peak.thresh.summit`, the height of the peak with respect to the mode of
the whole trace. So this takes a value between 0-1 describing a percentage of
the mode the peak must have. To fit all possible peaks, set both of these to 0

Peaks must also be adjacent. So if peak 2 does not pass `peak.thresh.enrich`
but peak 3 does, only 2 peaks are fit. This is done to avoid fitting many
peaks in the marginal count range.

After estimating starting values, a Gaussian mixture distribution is fit to
the trace (a sum of the PDF of individuals Gaussian). The starting values
for the peak standard deviations are estimated from the trace in the bound
of peak0. These values are input into the Levenberg-Marquardt algo to
optimize with respect to the residual sum of squares between the model
and the smoothed trace in mode 'LS' or using MLE and R optim() when in mode
'MLE'.

# `opt.peak.pos.dev`
opt.peak.pos.dev controls the range peaks are allowed to vary in position
during optimization. Defaults to +- half the estimated peak distance (NULL).
To ignore this, set to Inf. This setting avoids the optimizer putting peaks
in the left tail that sometimes might be present or separating peaks into
nonsensical distances. To contol the allowable range of initial peak
estimates see `window.scaling.factors`

# `opt.trim.left.tail` / `opt.trim.right.tail`
Removes values (MLE) or sets count to zero (LS) of values that fall outside
1sd of the initial model space. This essentially functions as an auto gate
after identifying initial peak positions.

# `mode`
The package offers two optimization schemes:

Non linear least squares (LS) with mode=“LS”. Here the data is first binned
and smoothed, then parameters are optimized over the smoothed trace using non
linear least squares. This method is quick and robust, but relies on binning
and some other data processing so is technically less accurate.

Maximum likelihood estimation (MLE) based with mode=“MLE”. This mode is a
little more proper in that it does not rely on binning or other data tricks
to optimize, and takes the full data set to optimize on directly. Initial
parameter estimation is still done on a binned smoothed version of the data,
but optimization is not.

In practice I have found very little difference between these two when the
setup is performed correctly.

# `window.scaling.factors`
window.scaling.factors control the size of the window left and right around the next peak position
to find the mode of the next peak. The smaller this value is, the closer to the half intensity the
peak estimates will be.

I.e. if the estimated distance between peaks is 0.5 and the scaling
factors are c(0.25, 0.5) and the current peak is 1.5 the next peak mode will be estimates as:
lower <- 0.5 * 0.25
upper <- 0.5 * 0.5

# Where should the next peak be based on half it's intensity
est.peak.pos <- log10(10^1.5/2)

Then find the max value in the window est.peak.pos-lower, est.peak.pos+upper
}
\examples{

# Simulate proliferation data
y <- 10 ^ rnorm(1000, mean=10, sd=0.05)
y <- c(y/4, y/2, y)

# Fit peaks
peaks <- fit.peaks(y, peak.0.lower.bound=9.8)

# Simulate proliferation data #2
y <- 10 ^ rnorm(1000, mean=10, sd=0.05)
y <- c((y/8)[1:500], y/4, y/2, y[1:500])

peaks <- fit.peaks(y, peak.0.lower.bound=9.9, mode="MLE")

}
